#
# Shorewall 4 - Multicast/Anycast Action
#
#    /usr/share/shorewall/action.Broadcast
#
#     This program is under GPL [http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt]
#
#     (c) 2011 - Tom Eastep (teastep@shorewall.net)
#
#       Complete documentation is available at http://shorewall.net
#
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of Version 2 of the GNU General Public License
#       as published by the Free Software Foundation.
#
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#       GNU General Public License for more details.
#
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#   Broadcast[([<action>|-[,{audit|-}])]
#
#       Default action is DROP
#
##########################################################################################

DEFAULTS DROP,-

?begin perl;

use Shorewall::IPAddrs;
use Shorewall::Config;
use Shorewall::Chains;

my $chainref           = get_action_chain;
my ( $action, $audit ) = get_action_params( 2 );
my ( $level, $tag )    = get_action_logging;
my $target             = require_audit ( $action , $audit );

fatal_error "Invalid parameter to action Broadcast"   if supplied $audit && $audit ne 'audit';

if ( have_capability( 'ADDRTYPE' ) ) {
    if ( $level ne '' ) {
	log_rule_limit $level, $chainref, 'dropBcast' , $action, '', $tag, 'add', ' -m addrtype --dst-type MULTICAST ';
	log_rule_limit $level, $chainref, 'dropBcast' , $action, '', $tag, 'add', ' -m addrtype --dst-type ANYCAST ';
    }

    add_jump $chainref, $target, 0, '-m addrtype --dst-type BROADCAST ';
    add_jump $chainref, $target, 0, '-m addrtype --dst-type MULTICAST ';
    add_jump $chainref, $target, 0, '-m addrtype --dst-type ANYCAST ';
} else {
    add_commands $chainref, 'for address in $ALL_ACASTS; do';
    incr_cmd_level $chainref;
    log_rule_limit $level, $chainref, 'Broadcast' , $action, '', $tag, 'add', ' -d $address ' if $level ne '';
    add_jump $chainref, $target, 0, "-d \$address ";
    decr_cmd_level $chainref;
    add_commands $chainref, 'done';

    log_rule_limit( $level, $chainref, 'Broadcast' , $action, '', $tag, 'add', join( ' ', '-d', IPv6_MULTICAST . ' ' ) )  if $level ne '';
    add_jump $chainref, $target, 0, join( ' ', '-d', IPv6_MULTICAST . ' ' );
}

1;

?end perl;
